{"version":3,"sources":["components/Calories.js","App.js","serviceWorker.js","index.js"],"names":["Calories","state","calories","weight","steps","show","onCaloriesEntered","e","setState","Number","target","value","onWeightEntered","onCalculateClicked","preventDefault","finalSteps","Math","floor","classes","this","props","error","Container","component","maxWidth","className","paper","onSubmit","form","validate","TextField","variant","margin","fullWidth","id","label","name","autoFocus","type","required","onChange","Button","color","submit","React","Component","withStyles","theme","display","flexDirection","alignItems","avatar","spacing","backgroundColor","palette","secondary","main","width","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4UA0BMA,G,kNACJC,MAAQ,CACNC,SAAU,EACVC,OAAQ,EACRC,MAAO,EACPC,MAAM,G,EAGRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZN,SAAUO,OAAOF,EAAEG,OAAOC,U,EAI9BC,gBAAkB,SAACL,GACjB,EAAKC,SAAS,CACZL,OAAQM,OAAOF,EAAEG,OAAOC,U,EAI5BE,mBAAqB,SAACN,GAAO,IAAD,EACG,EAAKN,MAA1BC,EADkB,EAClBA,SAAUC,EADQ,EACRA,OAClBI,EAAEO,iBACF,IAEIC,EAFe,IAAO,IACOb,EACAC,EACjC,EAAKK,SAAS,CACZJ,MAAOY,KAAKC,MAAMR,OAAOM,IACzBV,MAAM,K,uDAGA,IACAa,EAAYC,KAAKC,MAAjBF,QADD,EAEkCC,KAAKlB,MAAtCG,EAFD,EAECA,MAAOF,EAFR,EAEQA,SAAUG,EAFlB,EAEkBA,KAAMgB,EAFxB,EAEwBA,MAC/B,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,yBAAKC,UAAWP,EAAQQ,OACtB,mDACA,0BACEC,SAAUR,KAAKN,mBACfY,UAAWP,EAAQU,KACnBC,SAAS,QAET,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,OAAO,SACPC,WAAS,EACTC,GAAG,WACHC,MAAM,iBACNC,KAAK,WACLC,WAAS,EACTC,KAAK,SACLC,UAAQ,EACRC,SAAUrB,KAAKb,oBAEjB,kBAACwB,EAAA,EAAD,CACEC,QAAQ,WACRC,OAAO,SACPC,WAAS,EACTG,KAAK,SACLD,MAAM,yBACND,GAAG,SACHK,UAAQ,EACRD,KAAK,SACLE,SAAUrB,KAAKP,kBAEjB,kBAAC6B,EAAA,EAAD,CACEH,KAAK,SACLL,WAAS,EACTF,QAAQ,YACRW,MAAM,UACNjB,UAAWP,EAAQyB,QALrB,aASCtB,GAAS,yBAAKI,UAAU,SAAf,8BACTpB,GACC,yBAAKoB,UAAU,SACb,uCAAahB,OAAOL,GAASA,EAAQ,EAArC,UACA,sCAAYK,OAAOL,GAASF,EAAW,EAAvC,qB,GA/EO0C,IAAMC,YAyFdC,eA5GG,SAACC,GAAD,MAAY,CAC5BrB,MAAO,CACLsB,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNnB,OAAQe,EAAMK,QAAQ,GACtBC,gBAAiBN,EAAMO,QAAQC,UAAUC,MAE3C5B,KAAM,CACJ6B,MAAO,OACPC,UAAWX,EAAMK,QAAQ,IAE3BT,OAAQ,CACNX,OAAQe,EAAMK,QAAQ,EAAG,EAAG,OA6FjBN,CAAsB9C,G,MCpGtB2D,MAXf,WACE,OACE,yBAAKlC,UAAU,cACb,uBAAGA,UAAU,YAAb,4DAGA,kBAAC,EAAD,QCEcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLwD,QAAQxD,MAAMA,EAAMyD,c","file":"static/js/main.bdefbfe3.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport \"./Calories.css\";\n\nconst useStyles = (theme) => ({\n  paper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n});\n\nclass Calories extends React.Component {\n  state = {\n    calories: 0,\n    weight: 0,\n    steps: 0,\n    show: false,\n  };\n\n  onCaloriesEntered = (e) => {\n    this.setState({\n      calories: Number(e.target.value),\n    });\n  };\n\n  onWeightEntered = (e) => {\n    this.setState({\n      weight: Number(e.target.value),\n    });\n  };\n\n  onCalculateClicked = (e) => {\n    const { calories, weight } = this.state;\n    e.preventDefault();\n    const countSteps = 2000 / 0.57;\n    let caloriesCount = countSteps * calories;\n    let finalSteps = caloriesCount / weight;\n    this.setState({\n      steps: Math.floor(Number(finalSteps)),\n      show: true,\n    });\n  };\n  render() {\n    const { classes } = this.props;\n    const { steps, calories, show, error } = this.state;\n    return (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <div className={classes.paper}>\n          <span>Calories Consumed</span>\n          <form\n            onSubmit={this.onCalculateClicked}\n            className={classes.form}\n            validate=\"true\"\n          >\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              id=\"calories\"\n              label=\"Enter Calories\"\n              name=\"calories\"\n              autoFocus\n              type=\"number\"\n              required\n              onChange={this.onCaloriesEntered}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              name=\"weight\"\n              label=\"Enter Weight in pounds\"\n              id=\"weight\"\n              required\n              type=\"number\"\n              onChange={this.onWeightEntered}\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Calculate\n            </Button>\n            {error && <div className=\"steps\">Please enter a valid input</div>}\n            {show && (\n              <div className=\"steps\">\n                <p>It takes {Number(steps) ? steps : 0} Steps</p>\n                <p>To burn {Number(steps) ? calories : 0} Calories</p>\n              </div>\n            )}\n          </form>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(useStyles)(Calories);\n","import React from \"react\";\nimport Calories from \"./components/Calories\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <p className=\"App-text\">\n        All conversions are based on a 2,000 steps/mile average.\n      </p>\n      <Calories />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}